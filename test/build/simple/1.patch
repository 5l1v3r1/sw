diff --git a/src/sw/builder/command.cpp b/src/sw/builder/command.cpp
index fe0ca5e..e5fc6f6 100644
--- a/src/sw/builder/command.cpp
+++ b/src/sw/builder/command.cpp
@@ -137,7 +137,7 @@ bool Command::isOutdated() const
     }
     else
     {
-        *((size_t*)&mtime) = r.first->mtime;
+        ((Command*)(this))->mtime = r.first->mtime;
         ((Command*)(this))->implicit_inputs = r.first->implicit_inputs;
         return isTimeChanged();
     }
@@ -459,7 +459,7 @@ void Command::afterCommand()
     auto &cs = getContext().getCommandStorage();
     auto &r = *cs.getStorage(command_storage == CS_LOCAL).insert(k).first;
     r.hash = k;
-    r.mtime = *(size_t*)&mtime;
+    r.mtime = mtime;
     r.implicit_inputs = implicit_inputs;
     cs.async_command_log(r, command_storage == CS_LOCAL);
 }
@@ -595,12 +595,14 @@ void Command::printOutputs()
         s += out.text + "\n";
     if (!err.text.empty())
         s += err.text + "\n";
-    if (!s.empty())
-    {
-        s = log_string + "\n" + s;
-        boost::trim(s);
+    if (s.empty())
+        return;
+    s = log_string + "\n" + s;
+    boost::trim(s);
+    if (write_output_to_file)
+        write_file(fs::current_path() / SW_BINARY_DIR / "rsp" / std::to_string(getHash()) += ".txt", s);
+    else
         LOG_INFO(logger, s);
-    }
 }
 
 String Command::makeErrorString(const String &e)
diff --git a/src/sw/builder/command.h b/src/sw/builder/command.h
index 83b550a..74680ae 100644
--- a/src/sw/builder/command.h
+++ b/src/sw/builder/command.h
@@ -166,6 +166,7 @@ struct SW_BUILDER_API Command : ICastable, CommandNode, detail::ResolvableComman
     bool do_not_save_command = false;
     bool silent = false; // no log record
     bool show_output = false; // no command output
+    bool write_output_to_file = false;
     int strict_order = 0; // used to execute this before other commands
     ResourcePool *pool = nullptr;
 
diff --git a/src/sw/builder/command_storage.cpp b/src/sw/builder/command_storage.cpp
index 9b68b89..6e398bb 100644
--- a/src/sw/builder/command_storage.cpp
+++ b/src/sw/builder/command_storage.cpp
@@ -84,7 +84,11 @@ void FileDb::write(std::vector<uint8_t> &v, const CommandRecord &f)
         return;
 
     write_int(v, f.hash);
+#ifndef __APPLE__
     write_int(v, f.mtime);
+#else
+    write_int(v, decltype(f.mtime)::clock::to_time_t(f.mtime));
+#endif
 
     auto n = f.implicit_inputs.size();
     write_int(v, n);
@@ -151,9 +155,13 @@ static void load(const path &fn, Files &files, ConcurrentCommandStorage &command
             auto r = commands.insert(h);
             r.first->hash = h;
 
-            size_t m;
+            time_t m;
             b.read(m);
-            r.first->mtime = m;
+#ifndef __APPLE__
+            *(time_t*)&r.first->mtime = m;
+#else
+            r.first->mtime = decltype(r.first->mtime)::clock::from_time_t(m);
+#endif
 
             size_t n;
             b.read(n);
diff --git a/src/sw/builder/command_storage.h b/src/sw/builder/command_storage.h
index 01fdc12..777567f 100644
--- a/src/sw/builder/command_storage.h
+++ b/src/sw/builder/command_storage.h
@@ -18,7 +18,7 @@ namespace sw
 struct CommandRecord
 {
     size_t hash = 0;
-    size_t mtime = 0;
+    fs::file_time_type mtime = fs::file_time_type::min();
     Files implicit_inputs;
 };
 
diff --git a/src/sw/builder/execution_plan.cpp b/src/sw/builder/execution_plan.cpp
index c411aa3..a702675 100644
--- a/src/sw/builder/execution_plan.cpp
+++ b/src/sw/builder/execution_plan.cpp
@@ -57,6 +57,7 @@ void ExecutionPlan::execute(Executor &e) const
         {
             static_cast<builder::Command*>(c)->silent = silent;
             static_cast<builder::Command*>(c)->show_output = show_output;
+            static_cast<builder::Command*>(c)->write_output_to_file = write_output_to_file;
             static_cast<builder::Command*>(c)->always |= build_always;
         }
     }
diff --git a/src/sw/builder/execution_plan.h b/src/sw/builder/execution_plan.h
index fcc8a28..f4addc9 100644
--- a/src/sw/builder/execution_plan.h
+++ b/src/sw/builder/execution_plan.h
@@ -44,6 +44,7 @@ struct SW_BUILDER_API ExecutionPlan
     bool build_always = false;
     bool silent = false;
     bool show_output = false;
+    bool write_output_to_file = false;
 
     ExecutionPlan() = default;
     ExecutionPlan(const ExecutionPlan &rhs) = delete;
diff --git a/src/sw/builder/program_version_storage.cpp b/src/sw/builder/program_version_storage.cpp
index ba3f297..7460b90 100644
--- a/src/sw/builder/program_version_storage.cpp
+++ b/src/sw/builder/program_version_storage.cpp
@@ -27,8 +27,12 @@ ProgramVersionStorage::ProgramVersionStorage(const path &fn)
             break;
         ifile >> v;
         ifile >> t;
-        auto lwt = fs::last_write_time(p).time_since_epoch().count();
-        if (t && lwt <= t)
+        auto lwt = fs::last_write_time(p);
+#ifndef __APPLE__
+        if (t && *(time_t*)&lwt <= t)
+#else
+        if (t && lwt <= decltype(lwt)::clock::from_time_t(t))
+#endif
             versions[p] = {v,lwt};
     }
 }
@@ -37,7 +41,11 @@ ProgramVersionStorage::~ProgramVersionStorage()
 {
     std::ofstream ofile(fn);
     for (auto &[p, v] : std::map{ versions.begin(), versions.end() })
-        ofile << p << " " << v.v.toString() << " " << v.t << "\n";
+#ifndef __APPLE__
+        ofile << p << " " << v.v.toString() << " " << *(time_t*)&v.t << "\n";
+#else
+        ofile << p << " " << v.v.toString() << " " << decltype(v.t)::clock::to_time_t(v.t) << "\n";
+#endif
 }
 
 }
diff --git a/src/sw/builder/program_version_storage.h b/src/sw/builder/program_version_storage.h
index f389545..13ad3d1 100644
--- a/src/sw/builder/program_version_storage.h
+++ b/src/sw/builder/program_version_storage.h
@@ -18,7 +18,7 @@ struct ProgramVersionStorage
     struct ProgramInfo
     {
         Version v;
-        time_t t;
+        fs::file_time_type t;
 
         operator Version&() { return v; }
     };
@@ -31,7 +31,7 @@ struct ProgramVersionStorage
 
     void addVersion(const path &p, const Version &v)
     {
-        versions[p] = {v,fs::last_write_time(p).time_since_epoch().count()};
+        versions[p] = {v,fs::last_write_time(p)};
     }
 };
 
diff --git a/src/sw/client/command/build.cpp b/src/sw/client/command/build.cpp
index 175fb7f..f7e2066 100644
--- a/src/sw/client/command/build.cpp
+++ b/src/sw/client/command/build.cpp
@@ -55,6 +55,9 @@ static cl::list<String> os("os", cl::desc("Set build target os"), cl::CommaSepar
 static cl::list<String> libc("libc", cl::desc("Set build libc"), cl::CommaSeparated);
 static cl::list<String> libcpp("libcpp", cl::desc("Set build libcpp"), cl::CommaSeparated);
 
+static ::cl::opt<bool> static_deps("static-dependencies", ::cl::desc("Build static dependencies of inputs"));
+static cl::alias static_deps2("static-deps", cl::aliasopt(static_deps));
+
 // -setting k1=v1,k2=v2,k3="v3,v3" -setting k4=v4,k5,k6 etc.
 // settings in one setting applied simultaneosly
 // settings in different settings are multiplied
@@ -257,6 +260,9 @@ std::vector<sw::TargetSettings> createSettings(const sw::SwBuild &b)
         applySettingsFromFile(initial_settings["host"].getSettings(), host_settings_file);
     }
 
+    if (static_deps)
+        initial_settings["static-deps"] = "true";
+
     std::vector<sw::TargetSettings> settings;
     settings.push_back(initial_settings);
 
diff --git a/src/sw/core/build.cpp b/src/sw/core/build.cpp
index bc520f7..77d4649 100644
--- a/src/sw/core/build.cpp
+++ b/src/sw/core/build.cpp
@@ -22,12 +22,13 @@ DECLARE_STATIC_LOGGER(logger, "build");
 
 //cl::opt<bool> dry_run("n", cl::desc("Dry run"));
 
-cl::opt<bool> build_always("B", cl::desc("Build always"));
-cl::opt<int> skip_errors("k", cl::desc("Skip errors"));
+static cl::opt<bool> build_always("B", cl::desc("Build always"));
+static cl::opt<int> skip_errors("k", cl::desc("Skip errors"));
 static cl::opt<bool> time_trace("time-trace", cl::desc("Record chrome time trace events"));
 
 //static cl::opt<bool> hide_output("hide-output");
 static cl::opt<bool> cl_show_output("show-output");
+static cl::opt<bool> cl_write_output_to_file("write-output-to-file");
 static cl::opt<bool> print_graph("print-graph", cl::desc("Print file with build graph"));
 
 #define CHECK_STATE(from)                                                                 \
@@ -339,6 +340,8 @@ void SwBuild::execute(ExecutionPlan &p) const
     CHECK_STATE_AND_CHANGE(BuildState::Prepared, BuildState::Executed);
 
     p.build_always = build_always;
+    p.show_output = cl_show_output | cl_write_output_to_file;
+    p.write_output_to_file = cl_write_output_to_file;
     p.skip_errors = skip_errors.getValue();
 
     //ScopedTime t;
diff --git a/src/sw/core/c.cpp b/src/sw/core/c.cpp
index 454ddd6..85bf98c 100644
--- a/src/sw/core/c.cpp
+++ b/src/sw/core/c.cpp
@@ -85,6 +85,7 @@ void *sw_calloc(size_t num, size_t size)
     return calloc(num, size);
 }
 
+#ifndef __APPLE__
 void *sw_aligned_alloc(size_t alignment, size_t size)
 {
 #ifdef _MSC_VER
@@ -95,3 +96,4 @@ void *sw_aligned_alloc(size_t alignment, size_t size)
     return aligned_alloc(alignment, size);
 #endif
 }
+#endif
diff --git a/src/sw/core/c.h b/src/sw/core/c.h
index 539fcc1..e2c83e6 100644
--- a/src/sw/core/c.h
+++ b/src/sw/core/c.h
@@ -9,7 +9,7 @@
 #ifndef _SW_CORE_C_H_
 #define _SW_CORE_C_H_
 
-#include <malloc.h>
+#include <stddef.h>
 
 /* memory allocations */
 
diff --git a/src/sw/core/sw_context.cpp b/src/sw/core/sw_context.cpp
index 621e7be..c2f5f03 100644
--- a/src/sw/core/sw_context.cpp
+++ b/src/sw/core/sw_context.cpp
@@ -64,9 +64,9 @@ void SwCoreContext::setHostPrograms()
             ts["native"]["program"]["lib"] = "com.Microsoft.VisualStudio.VC.lib";
             ts["native"]["program"]["link"] = "com.Microsoft.VisualStudio.VC.link";
         }
-        // add more defaults
+        // add more defaults (clangcl, clang)
         else
-            SW_UNIMPLEMENTED;
+            throw SW_RUNTIME_ERROR("Seems like you do not have Visual Studio installed.\n Please, install the latest Visual Studio first.");
     }
     // add more defaults
     else
diff --git a/src/sw/driver/build_settings.cpp b/src/sw/driver/build_settings.cpp
index a6e9a12..71eaba1 100644
--- a/src/sw/driver/build_settings.cpp
+++ b/src/sw/driver/build_settings.cpp
@@ -19,14 +19,15 @@ static OS fromTargetSettings(const TargetSettings &ts)
 {
     OS os;
 
-#define IF_SETTING(s, var, value) \
-    else if (v == s)      \
+#define IF_SETTING(s, var, value)   \
+    else if (v == s)                \
         var = value
 
-#define IF_KEY(k)            \
+#define IF_KEY(k)           \
     {                       \
-        auto &v = ts[k]; \
+        auto &v = ts[k];    \
         if (v) {
+
 #define IF_END }}
 
     IF_KEY("os"]["kernel")
@@ -112,11 +113,22 @@ String BuildSettings::getTargetTriplet() const
     // See https://clang.llvm.org/docs/CrossCompilation.html
 
     String target;
+
+    // arch
     target += toTripletString(TargetOS.Arch);
     if (TargetOS.Arch == ArchType::arm)
         target += toTripletString(TargetOS.SubArch);
-    target += "-unknown"; // vendor
+
+    // vendor
+    if (TargetOS.is(OSType::Macos))
+        target += "-apple";
+    else
+        target += "-unknown";
+
+    // os
     target += "-" + toTripletString(TargetOS.Type);
+    if (TargetOS.is(OSType::Macos) && TargetOS.Version > Version(1))
+        target += TargetOS.Version.toString();
     if (TargetOS.Type == OSType::Android)
         target += "-android";
     if (TargetOS.Arch == ArchType::arm)
diff --git a/src/sw/driver/checks.cpp b/src/sw/driver/checks.cpp
index 95df998..6c8ff70 100644
--- a/src/sw/driver/checks.cpp
+++ b/src/sw/driver/checks.cpp
@@ -481,7 +481,10 @@ int main() { return IsBigEndian(); }
                 ctx.addLine("echo \"# " + defs + "\" >> " + mfn);
 
                 if (!bat)
+                {
+                    ctx.addLine("chmod 755 " + fn);
                     ctx.addLine("./");
+                }
                 ctx.addText(fn + checker.build.getBuildSettings().TargetOS.getExecutableExtension());
 
                 ctx.addLine("echo " + std::to_string(c->getHash()) + " ");
diff --git a/src/sw/driver/options_cl.yml b/src/sw/driver/options_cl.yml
index 517526f..fe3e2a4 100644
--- a/src/sw/driver/options_cl.yml
+++ b/src/sw/driver/options_cl.yml
@@ -35,6 +35,13 @@ flags:
         type: bool
         default: true
 
+    nologo:
+        name: Nologo
+        flag: nologo
+        type: bool
+        default: true
+        order: -100
+
 types:
     # internal name
     vscomn:
@@ -44,18 +51,11 @@ types:
         name: VisualStudioCommonCompilerOptions
         parent: VisualStudioCommonOptions
 
-        flags:
-            nologo:
-                name: Nologo
-                flag: nologo
-                type: bool
-                default: true
-                order: -100
-
         using:
             - compile
             - pp_to_stdout
             - vsoutput
+            - nologo
 
     vsasm:
         name: VisualStudioAssemblerOptions
@@ -572,6 +572,7 @@ types:
 
         using:
             - vsoutput
+            - nologo
             - input:
                 order: 100
 
@@ -780,7 +781,6 @@ types:
                 name: Permissive
                 flag: fpermissive
                 type: bool
-                default: true
 
             isr:
                 name: IncludeSystemRoot
diff --git a/src/sw/driver/target/native.cpp b/src/sw/driver/target/native.cpp
index ec579ed..700f700 100644
--- a/src/sw/driver/target/native.cpp
+++ b/src/sw/driver/target/native.cpp
@@ -393,7 +393,10 @@ std::shared_ptr<NativeLinker> NativeCompiledTarget::activateLinker(const TargetS
         // is it true?
         c->Type = LinkerType::GNU;
         C->Prefix = getBuildSettings().TargetOS.getLibraryPrefix();
-        if (id.ppath == "org.LLVM.clang")
+        if (getBuildSettings().TargetOS.Type == OSType::Macos)
+            C->use_start_end_groups = false;
+        if (id.ppath == "org.LLVM.clang" ||
+            id.ppath == "org.LLVM.clangpp")
         {
             create_command();
             auto cmd = c->createCommand(getSolution().getContext());
@@ -507,7 +510,15 @@ void NativeCompiledTarget::findCompiler()
 
     // compiler runtime
     if (ts["native"]["stdlib"]["compiler"])
-        *this += UnresolvedPackage(ts["native"]["stdlib"]["compiler"].getValue());
+    {
+        if (ts["native"]["stdlib"]["compiler"].isValue())
+            *this += UnresolvedPackage(ts["native"]["stdlib"]["compiler"].getValue());
+        else if (ts["native"]["stdlib"]["compiler"].isArray())
+        {
+            for (auto &s : ts["native"]["stdlib"]["compiler"].getArray())
+                *this += UnresolvedPackage(s);
+        }
+    }
 
     // kernel headers
     if (ts["native"]["stdlib"]["kernel"])
@@ -538,6 +549,12 @@ bool NativeCompiledTarget::init()
             ts_export["export-if-static"].use();
         }
 
+        if (ts_export["static-deps"] == "true")
+        {
+            ts_export["native"]["library"] = "static";
+            ts_export["static-deps"].reset();
+        }
+
         addPackageDefinitions();
 
         // we set output file, but sometimes overridden call must set it later
@@ -1631,7 +1648,8 @@ void NativeCompiledTarget::autoDetectSources()
     if (!(sources_empty && !already_built))
         return;
 
-    LOG_TRACE(logger, getPackage().toString() + ": Autodetecting sources");
+    // make additional log level for this
+    //LOG_TRACE(logger, getPackage().toString() + ": Autodetecting sources");
 
     // all files except starting from point
     static const auto files_regex = "[^\\.].*";
@@ -1719,7 +1737,8 @@ void NativeCompiledTarget::autoDetectIncludeDirectories()
         return;
     }
 
-    LOG_TRACE(logger, getPackage().toString() + ": Autodetecting include dirs");
+    // make additional log level for this
+    //LOG_TRACE(logger, getPackage().toString() + ": Autodetecting include dirs");
 
     // public idirs
     for (auto &d : include_dir_names)
@@ -1906,7 +1925,8 @@ bool NativeCompiledTarget::prepare()
     {
     case 1:
     {
-        LOG_TRACE(logger, "Preparing target: " + getPackage().getPath().toString());
+        // make additional log level for this
+        //LOG_TRACE(logger, "Preparing target: " + getPackage().getPath().toString());
 
         call(CallbackType::BeginPrepare);
 
@@ -3094,7 +3114,8 @@ void NativeCompiledTarget::configureFile1(const path &from, const path &to, Conf
         if (!repl)
         {
             s = m.prefix().str() + m.suffix().str();
-            LOG_TRACE(logger, "configure @@ or ${} " << m[1].str() << ": replacement not found");
+            // make additional log level for this
+            //LOG_TRACE(logger, "configure @@ or ${} " << m[1].str() << ": replacement not found");
             continue;
         }
         s = m.prefix().str() + *repl + m.suffix().str();
@@ -3107,7 +3128,8 @@ void NativeCompiledTarget::configureFile1(const path &from, const path &to, Conf
         if (!repl)
         {
             s = m.prefix().str() + "/* #undef " + m[1].str() + " */\n" + m.suffix().str();
-            LOG_TRACE(logger, "configure #mesondefine " << m[1].str() << ": replacement not found");
+            // make additional log level for this
+            //LOG_TRACE(logger, "configure #mesondefine " << m[1].str() << ": replacement not found");
             continue;
         }
         s = m.prefix().str() + "#define " + m[1].str() + " " + *repl + "\n" + m.suffix().str();
@@ -3122,7 +3144,8 @@ void NativeCompiledTarget::configureFile1(const path &from, const path &to, Conf
             if (!repl)
             {
                 s = m.prefix().str() + m.suffix().str();
-                LOG_TRACE(logger, "configure #undef " << m[1].str() << ": replacement not found");
+                // make additional log level for this
+                //LOG_TRACE(logger, "configure #undef " << m[1].str() << ": replacement not found");
                 continue;
             }
             if (offValues.find(boost::to_upper_copy(*repl)) != offValues.end())
@@ -3139,7 +3162,8 @@ void NativeCompiledTarget::configureFile1(const path &from, const path &to, Conf
         auto repl = find_repl(m[1].str());
         if (!repl)
         {
-            LOG_TRACE(logger, "configure #cmakedefine " << m[1].str() << ": replacement not found");
+            // make additional log level for this
+            //LOG_TRACE(logger, "configure #cmakedefine " << m[1].str() << ": replacement not found");
             repl = {};
         }
         if (offValues.find(boost::to_upper_copy(*repl)) != offValues.end())
@@ -3154,7 +3178,8 @@ void NativeCompiledTarget::configureFile1(const path &from, const path &to, Conf
         auto repl = find_repl(m[1].str());
         if (!repl)
         {
-            LOG_TRACE(logger, "configure #cmakedefine01 " << m[1].str() << ": replacement not found");
+            // make additional log level for this
+            //LOG_TRACE(logger, "configure #cmakedefine01 " << m[1].str() << ": replacement not found");
             repl = {};
         }
         if (offValues.find(boost::to_upper_copy(*repl)) != offValues.end())
diff --git a/sw.cpp b/sw.cpp
index eb76af4..e8b0a96 100644
--- a/sw.cpp
+++ b/sw.cpp
@@ -56,6 +56,11 @@ void build(Solution &s)
         }
         if (support.getBuildSettings().TargetOS.Type == OSType::Macos)
             support.Public += "BOOST_STACKTRACE_GNU_SOURCE_NOT_REQUIRED"_def;
+        if (support.getCompilerType() != CompilerType::MSVC)
+        {
+            support.Protected.CompileOptions.push_back("-Wall");
+            support.Protected.CompileOptions.push_back("-Wextra");
+        }
     }
 
     auto &protos = p.addTarget<StaticLibraryTarget>("protos");
@@ -78,14 +83,14 @@ void build(Solution &s)
         manager.Public += "BOOST_DLL_USE_STD_FS"_def;
 
         auto srcdep = "pub.egorpugin.primitives.source-master"_dep;
+        auto verdep = "pub.egorpugin.primitives.version-master"_dep;
         manager.Public += support, protos,
+            srcdep, verdep,
             "pub.egorpugin.primitives.date_time-master"_dep,
             "pub.egorpugin.primitives.db.sqlite3-master"_dep,
             "pub.egorpugin.primitives.lock-master"_dep,
             "pub.egorpugin.primitives.pack-master"_dep,
-            srcdep,
             "pub.egorpugin.primitives.sw.settings-master"_dep,
-            "pub.egorpugin.primitives.version-master"_dep,
             "pub.egorpugin.primitives.yaml-master"_dep,
             "org.sw.demo.nlohmann.json-3"_dep,
             "org.sw.demo.boost.variant"_dep,
@@ -95,6 +100,8 @@ void build(Solution &s)
 #ifdef SW_CPP_DRIVER_API_VERSION
         //srcdep->getSettings()["export-if-static"] = "true";
         //srcdep->getSettings()["export-if-static"].setRequired();
+        verdep->getSettings()["export-if-static"] = "true";
+        verdep->getSettings()["export-if-static"].setRequired();
 #endif
 
         manager.Public -= "pub.egorpugin.primitives.win32helpers-master"_dep;
diff --git a/test/build/simple/main.cpp b/test/build/simple/main.cpp
index f0414a3..a14cc17 100644
--- a/test/build/simple/main.cpp
+++ b/test/build/simple/main.cpp
@@ -1,15 +1,18 @@
 #include <exception>
 #include <iostream>
 #include <stdexcept>
+#include <thread>
 
 API
-void f(){}
+void f();
 
 int main()
 {
     std::cout << "Hello, World!\n";
-    try { throw std::runtime_error("x"); }
-    catch(std::runtime_error &){ std::cout << "Hello, World!\n"; }
-    catch(std::exception &){}
+
+    f();
+    std::thread t([] {f(); });
+    t.join();
+
     return 0;
 }
diff --git a/test/build/simple/sw.cpp b/test/build/simple/sw.cpp
index 4969748..e447694 100644
--- a/test/build/simple/sw.cpp
+++ b/test/build/simple/sw.cpp
@@ -17,7 +17,7 @@ void build(Solution &s)
     {
         auto &e = s.addExecutable("test2");
         e.ApiName = "API";
-        e += "main.cpp";
+        e += "main.cpp", "f.cpp";
     }
 
     {
