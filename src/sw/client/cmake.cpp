#include "commands.h"
#include "inserts.h"

#include <primitives/emitter.h>
#include <sw/driver/solution_build.h>
#include <sw/driver/target/native.h>

static ::cl::opt<path> integrate_cmake_deps("cmake-deps", ::cl::sub(subcommand_integrate));

struct CMakeEmitter : primitives::Emitter
{
    void if_(const String &s)
    {
        addLine("if (" + s + ")");
        increaseIndent();
    }

    void elseif(const String &s)
    {
        decreaseIndent();
        emptyLines(0);
        addLine("elseif(" + s + ")");
        increaseIndent();
    }

    void else_()
    {
        decreaseIndent();
        emptyLines(0);
        addLine("else()");
        increaseIndent();
    }

    void endif()
    {
        decreaseIndent();
        emptyLines(0);
        addLine("endif()");
        emptyLines();
    }
};

static String toCmakeString(sw::ConfigurationType t)
{
    switch (t)
    {
    case sw::ConfigurationType::Debug: return "DEBUG";
    case sw::ConfigurationType::MinimalSizeRelease: return "MINSIZEREL";
    case sw::ConfigurationType::ReleaseWithDebugInformation: return "RELWITHDEBINFO";
    case sw::ConfigurationType::Release: return "RELEASE";
    default:
        SW_UNIMPLEMENTED;
    }
}

SUBCOMMAND_DECL(integrate)
{
    if (!integrate_cmake_deps.empty())
    {
        auto lines = read_lines(integrate_cmake_deps);

        auto swctx = createSwContext();
        sw::Build b(swctx);
        b.Local = false;
        for (auto &cfg : {
            sw::ConfigurationType::Debug,
            sw::ConfigurationType::MinimalSizeRelease,
            sw::ConfigurationType::ReleaseWithDebugInformation,
            sw::ConfigurationType::Release,
            })
        {
            auto &s = b.addSolution();
            s.Settings.Native.ConfigurationType = cfg;
        }
        b.load_packages(StringSet(lines.begin(), lines.end()));
        b.prepare(); // or step?

        CMakeEmitter ctx;
        ctx.addLine("#");
        ctx.addLine("# sw autogenerated file");
        ctx.addLine("#");
        ctx.emptyLines();
        for (auto &s : b.solutions)
        {
            for (auto &[pkg, t] : s.getChildren())
            {
                auto &nt = *t->as<sw::NativeExecutedTarget>();

                ctx.if_("NOT TARGET " + pkg.toString());

                // tgt
                ctx.addLine("add_library(" + pkg.toString() + " STATIC IMPORTED GLOBAL)");

                // props
                ctx.increaseIndent("set_target_properties(" + pkg.toString() + " PROPERTIES");

                // defs
                String defs;
                defs += "\"";
                for (auto &[k,v] : nt.Public.Definitions)
                {
                    if (v.empty())
                        defs += k + ";";
                    else
                        defs += k + "=" + v.toString() + ";";
                }
                for (auto &[k,v] : nt.Interface.Definitions)
                {
                    if (v.empty())
                        defs += k + ";";
                    else
                        defs += k + "=" + v.toString() + ";";
                }
                defs += "\"";
                ctx.addLine("INTERFACE_COMPILE_DEFINITIONS " + defs);

                // idirs
                String idirs;
                idirs += "\"";
                for (auto &d : nt.Public.IncludeDirectories)
                    idirs += normalize_path(d) + ";";
                for (auto &d : nt.Interface.IncludeDirectories)
                    idirs += normalize_path(d) + ";";
                idirs += "\"";
                ctx.addLine("INTERFACE_INCLUDE_DIRECTORIES " + idirs);

                // libs
                String libs;
                libs += "\"";
                for (auto &d : nt.Public.LinkLibraries)
                    libs += normalize_path(d) + ";";
                for (auto &d : nt.Interface.LinkLibraries)
                    libs += normalize_path(d) + ";";
                libs += "\"";
                ctx.addLine("INTERFACE_LINK_LIBRARIES " + libs);

                ctx.decreaseIndent(")");
                ctx.emptyLines();
                //

                // imported configs
                for (auto &s : b.solutions)
                {
                    auto &nt = *s.getChildren().find(pkg)->second->as<sw::NativeExecutedTarget>();

                    ctx.addLine("set_property(TARGET " + pkg.toString() + " APPEND PROPERTY IMPORTED_CONFIGURATIONS " + toCmakeString(s.Settings.Native.ConfigurationType) + ")");

                    // props2
                    ctx.increaseIndent("set_target_properties(" + pkg.toString() + " PROPERTIES");

                    ctx.addLine("IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG \"CXX\"");
                    ctx.addLine("IMPORTED_LOCATION_" + toCmakeString(s.Settings.Native.ConfigurationType) + " \"" + normalize_path(nt.getImportLibrary()) + "\"");

                    ctx.decreaseIndent(")");
                    ctx.emptyLines();
                }
                //

                ctx.emptyLines();

                // build dep
                ctx.addLine("add_dependencies(" + pkg.toString() + " sw_build_dependencies)");
                ctx.emptyLines();

                for (auto i = pkg.version.getLevel() - 1; i >= 0; i--)
                {
                    if (i)
                        ctx.addLine("add_library(" + pkg.ppath.toString() + "-" + pkg.version.toString(i) + " ALIAS " + pkg.toString() + ")");
                    else
                        ctx.addLine("add_library(" + pkg.ppath.toString() + " ALIAS " + pkg.toString() + ")");
                }

                ctx.endif();
            }
            break;
        }
        write_file_if_different(integrate_cmake_deps.parent_path() / "CMakeLists.txt", ctx.getText());
    }
}
