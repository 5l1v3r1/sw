// Copyright (C) 2018 Egor Pugin <egor.pugin@gmail.com>
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

syntax = "proto3";

option cc_enable_arenas = true;

package sw.api;

import "google/protobuf/empty.proto";

message PackageId {
    string path = 1;
    string version = 2;
}

message UnresolvedPackage {
    string path = 1;
    string range = 2;
}

message ResolvedPackage {
    message Dependency {
        int64 id = 1;
        // if package is deployed on a private server
        // string path?
        // flags?
    }

    // base fields
    int64 id = 1;
    PackageId package = 2;
    int64 flags = 3;
    string hash = 4;
    repeated Dependency dependencies = 5;
    // other
    //int64 group_number = 16;
    int32 prefix = 17;
    // int32 archive_type;
    // optional string download_url;
}

message ResolvedPackage2 {
    PackageId package = 1;
    int64 flags = 2;
    string hash = 3;
    repeated UnresolvedPackage dependencies = 4;
    // other
    //int64 group_number = 16;
    int32 prefix = 17;
    // int32 archive_type;
    // optional string download_url;
}

message UnresolvedPackages {
    repeated UnresolvedPackage packages = 1;
}

message ResolvedPackages {
    repeated ResolvedPackage packages = 1;
}

message ResolvedPackages2 {
    message ResolvedPackagePair {
        UnresolvedPackage unresolved_package = 1;
        ResolvedPackage2 resolved_package = 2;
    }

    repeated ResolvedPackagePair resolved_packages = 1;
    repeated UnresolvedPackage unresolved_packages = 2;
}

message PackageIds {
    repeated int64 ids = 1;
}

message NotificationsRequest {
    int32 n = 1;
}

message Notifications {
    message Notification {
        enum Type {
            NONE = 0;
            MESSAGE = 1;
            SUCCESS = 2;
            WARNING = 3;
            ERROR = 4;
        }
        Type type = 1;
        string text = 2;
        int64 timestamp = 3;
    }
    repeated Notification notifications = 1;
}

message NewPackage {
    message RawScript {
        string script = 1;
        string prefix_path = 2;
    }

    message NewVersion {
        PackageId package = 1;
        string old_version = 2;
    }

    message PackageData {
        string data = 1; // json string
        RawScript script = 2;
    }

    //
    oneof package {
        RawScript script = 1;
        NewVersion version = 2; // add new ver for existing package
        PackageData package_data = 3;
    }
}

// unauthorized
service ApiService {
    rpc ResolvePackages (UnresolvedPackages) returns (ResolvedPackages);

    // std::unordered_map<UnresolvedPackage, Package>
    //  resolve(const UnresolvedPackages &pkgs, UnresolvedPackages &unresolved_pkgs)
    rpc ResolvePackages2 (UnresolvedPackages) returns (ResolvedPackages2);

    //
    // following are subtle calls, probably to be removed

    // tbr, check downloads on s3
    rpc AddDownloads (PackageIds) returns (google.protobuf.Empty);
    rpc AddDownloads2 (PackageId) returns (google.protobuf.Empty); // second version, simple
    // also deprecate later
    rpc AddClientCall (google.protobuf.Empty) returns (google.protobuf.Empty);
}

// id: 1
service UserService {
    rpc AddPackage (NewPackage) returns (google.protobuf.Empty); // id: 1
    // update version (e.g. branch versions)
    rpc UpdatePackage (PackageId) returns (google.protobuf.Empty); // id: 2
    rpc RemovePackage (PackageId) returns (google.protobuf.Empty); // id: 3

    rpc GetNotifications (NotificationsRequest) returns (Notifications); // id: 4
    rpc ClearNotification (google.protobuf.Empty) returns (google.protobuf.Empty); // id: 5
}
