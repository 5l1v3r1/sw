flags:
    # internal name
    nologo:
        name: Nologo
        flag: nologo
        type: bool
        default: true

    compile:
        name: CompileWithoutLinking
        flag: c
        type: bool
        default: true

    pp_to_stdout:
        name: PreprocessToStdout
        flag: EP
        type: bool

    input:
        name: InputFile
        type: path
        properties:
            - input_dependency

types:
    # internal name
    vscomn:
        name: VisualStudioCommonOptions
        using:
            - nologo

    vscomncl:
        name: VisualStudioCommonCompilerOptions
        parent: VisualStudioCommonOptions

        flags:
            output:
                name: Output
                flag: Fo
                type: path
                properties:
                    - output_dependency

        using:
            - compile
            - pp_to_stdout

    vsasm:
        name: VisualStudioAssemblerOptions
        parent: VisualStudioCommonCompilerOptions

        flags:
            preserve_sym_case:
                name: PreserveSymbolCase
                flag: Cx
                type: bool

            safe_seh:
                name: SafeSEH
                flag: safeseh
                type: bool

        using:
            - input

    # https://docs.microsoft.com/en-us/cpp/build/reference/compiler-options-listed-alphabetically
    vscl:
        name: VisualStudioCompilerOptions
        parent: VisualStudioCommonCompilerOptions

        flags:
            usemodules:
                name: UseModules
                flag: experimental:module
                type: bool

            ifcdir:
                name: stdIfcDir
                flag: module:stdIfcDir
                type: path

            module_export:
                name: ExportModule
                flag: module:export
                type: bool

            #

            bigobj:
                name: BigObj
                flag: bigobj
                type: bool

            csf:
                name: CSourceFile
                flag: Tc
                type: path
                properties:
                    - input_dependency
                disallow_with:
                    - input
                    - cppsf

            cppstd:
                name: CPPStandard
                type: CPPLanguageStandard
                function_current: getCommandLineImplCPPLanguageStandardVS
                function: |
                    String s = "-std:c++";
                    switch (v)
                    {
                    case CPPLanguageStandard::CPP14:
                        s += "14";
                        break;
                    case CPPLanguageStandard::CPP17:
                        s += "17";
                        break;
                    case CPPLanguageStandard::CPPLatest:
                        s += "latest";
                        break;
                    default:
                        return {};
                    }
                    return { s };

            cppsf:
                name: CPPSourceFile
                flag: Tp
                type: path
                properties:
                    - input_dependency
                disallow_with:
                    - input
                    - csf

            cl_as_c:
                name: CompileAsC
                flag: TC
                type: bool
                disallow_with:
                    - cl_as_c

            cl_as_cpp:
                name: CompileAsCPP
                flag: TP
                type: bool
                disallow_with:
                    - cl_as_cpp

            dbgfmt:
                name: DebugInformationFormat
                type: vs::DebugInformationFormatType
                default: vs::DebugInformationFormatType::ProgramDatabase

                struct: |
                    enum class DebugInformationFormatType
                    {
                        None,
                        ObjectFile,
                        ProgramDatabase,
                        ProgramDatabaseEditAndContinue,

                        Z7 = ObjectFile,
                        Zi = ProgramDatabase,
                        ZI = ProgramDatabaseEditAndContinue,
                    };

                function: |
                    using namespace vs;

                    auto s = "-"s;
                    switch (value())
                    {
                    case DebugInformationFormatType::None:
                        return {};
                    case DebugInformationFormatType::ObjectFile:
                        s += "Z7";
                        break;
                    case DebugInformationFormatType::ProgramDatabase:
                        s += "Zi";
                        break;
                    case DebugInformationFormatType::ProgramDatabaseEditAndContinue:
                        s += "ZI";
                        break;
                    default:
                        throw SW_RUNTIME_ERROR("unreachable code");
                    }
                    return { s };

            exh:
                name: ExceptionHandlingModel
                type: vs::ExceptionHandlingVector
                default: vs::ExceptionHandlingVector{ vs::ExceptionHandling{} }

                struct: |
                    struct ExceptionHandling
                    {
                        bool SEH = false;               // a
                        bool CPP = true;                // s
                        bool ExternCMayThrow = false;   // c
                        bool TerminationChecks = false; // r
                        bool ClearFlag = false;         // -

                        String getCommandLine() const;
                    };

                    using ExceptionHandlingVector = std::vector<ExceptionHandling>;

                function: |
                    Strings s;
                    for (auto &e : value())
                        s.push_back(e.getCommandLine());
                    return s;

            force_include:
                name: ForcedIncludeFiles
                flag: FI
                type: FilesOrdered
                properties:
                    - flag_before_each_value

            sync_pdb:
                name: ForceSynchronousPDBWrites
                flag: FS
                type: bool
                default: true

            opt:
                name: Optimizations
                type: vs::Optimizations

                struct: |
                    struct Optimizations
                    {
                        bool Disable = false;
                        int Level = 2;
                        bool SmallCode = false;
                        bool FastCode = false;
                    };

                function: |
                    using namespace vs;

                    auto &o = value();

                    Strings s;
                    if (!o.Disable)
                    {
                        if (o.Level == 1 || o.SmallCode)
                            s.push_back("-O1");
                        else if (o.Level == 2 || o.FastCode)
                            s.push_back("-O2");
                    }
                    if (o.Disable)
                        s.push_back("-Od");

                    return { s };

            pdbfn:
                name: PDBFilename
                flag: Fd
                type: path
                properties:
                    - intermediate_file

            pchfn:
                name: PrecompiledHeaderFilename
                flag: Fp
                type: path

            pch:
                name: PrecompiledHeader
                type: vs::PrecompiledHeaderVs

                struct: |
                    struct PrecompiledHeaderVs
                    {
                        bool ignore = false;
                        bool with_debug_info = false;
                        std::optional<path> create;
                        std::optional<path> use;

                        Strings getCommandLine(::sw::builder::Command *c) const;
                    };

                function: |
                    return value().getCommandLine(c);

            pptofile:
                name: PreprocessToFile
                flag: P
                type: bool

            showinc:
                name: ShowIncludes
                flag: showIncludes
                type: bool
                default: true

            utf8:
                name: UTF8
                flag: utf-8
                type: bool
                default: true

            rtl:
                name: RuntimeLibrary
                type: vs::RuntimeLibraryType
                default: vs::RuntimeLibraryType::MultiThreadedDLL

                struct: |
                    enum class RuntimeLibraryType
                    {
                        MultiThreaded,
                        MultiThreadedDebug,
                        MultiThreadedDLL,
                        MultiThreadedDLLDebug,

                        MT = MultiThreaded,
                        MTd = MultiThreadedDebug,
                        MD = MultiThreadedDLL,
                        MDd = MultiThreadedDLLDebug,
                    };

                function: |
                    using namespace vs;

                    auto s = "-"s;
                    switch (value())
                    {
                    case RuntimeLibraryType::MultiThreaded:
                        s += "MT";
                        break;
                    case RuntimeLibraryType::MultiThreadedDebug:
                        s += "MTd";
                        break;
                    case RuntimeLibraryType::MultiThreadedDLL:
                        s += "MD";
                        break;
                    case RuntimeLibraryType::MultiThreadedDLLDebug:
                        s += "MDd";
                        break;
                    default:
                        throw SW_RUNTIME_ERROR("unreachable code");
                    }
                    return { s };

            wrn:
                name: Warnings
                type: vs::Warnings

                struct: |
                    struct Warnings
                    {
                        bool DisableAll = false;
                        bool EnableAll = false;
                        int Level = 3;
                        std::vector<int> Disable;
                        std::map<int, std::vector<int>> DisableOnLevel;
                        bool TreatAllWarningsAsError = false;
                        std::vector<int> TreatAsError;
                        std::vector<int> DisplayOnce;
                        bool EnableOneLineDiagnostics = false;
                    };

                function: |
                    using namespace vs;

                    auto &w = value();

                    Strings s;
                    if (w.DisableAll)
                        s.push_back("-w");
                    if (w.EnableAll)
                        s.push_back("-Wall");
                    if (w.Level >= 0 && w.Level <= 4)
                        s.push_back("-W" + std::to_string(w.Level));
                    for (auto &d : w.Disable)
                        s.push_back("-wd" + std::to_string(d));
                    for (auto &[l, ws] : w.DisableOnLevel)
                    {
                        for (auto &d : ws)
                            s.push_back("-wd" + std::to_string(l) + std::to_string(d));
                    }
                    if (w.TreatAllWarningsAsError)
                        s.push_back("-WX");
                    for (auto &d : w.TreatAsError)
                        s.push_back("-we" + std::to_string(d));
                    for (auto &d : w.DisplayOnce)
                        s.push_back("-wo" + std::to_string(d));
                    if (w.EnableOneLineDiagnostics)
                        s.push_back("-WL");

                    return { s };

        using:
            # goes last
            - input:
                disallow_with:
                    - csf
                    - cppsf

    # common for lib.exe and link.exe
    # https://docs.microsoft.com/en-us/cpp/build/reference/linker-options
    vslt:
        name: VisualStudioLibraryToolOptions
        parent: VisualStudioCommonOptions

        flags:
            ifiles:
                name: InputFiles
                type: Files
                properties:
                    - input_dependency

            lds:
                name: LinkDirectories
                type: FilesOrdered
                flag: "LIBPATH:"
                properties:
                    - input_dependency
                    - flag_before_each_value

            mt:
                name: Machine
                type: vs::MachineType
                flag: "MACHINE:"
                default: vs::MachineType::X64

            def:
                name: DefinitionFile
                type: path
                flag: "DEF:"
                properties:
                    - input_dependency

            implib:
                name: ImportLibrary
                type: path
                flag: "IMPLIB:"
                properties:
                    # why? implib must present for dlls
                    # some dlls might be generated without implibs for dynamic loading only
                    - intermediate_file

            out:
                name: Output
                type: path
                flag: "OUT:"
                properties:
                    - output_dependency

    vslib:
        name: VisualStudioLibrarianOptions

    # https://docs.microsoft.com/en-us/cpp/build/reference/linker-options
    vslink:
        name: VisualStudioLinkerOptions

        flags:
            ild:
                name: InputLibraryDependencies
                type: FilesOrdered
                properties:
                    - input_dependency

            dll:
                name: Dll
                type: bool
                flag: "DLL:"
                properties:
                    - config_variable

            delay:
                name: DelayLoadDlls
                type: FilesOrdered
                flag: "DELAYLOAD:"
                properties:
                    - flag_before_each_value

            dbg:
                name: GenerateDebugInfo
                type: bool
                flag: DEBUG

            frc:
                name: Force
                type: vs::ForceType
                flag: "FORCE:"

            pdb:
                name: PDBFilename
                type: path
                flag: "PDB:"
                properties:
                    - output_dependency

            noentr:
                name: NoEntry
                type: bool
                flag: NOENTRY

            sub:
                name: Subsystem
                type: vs::Subsystem
                flag: "SUBSYSTEM:"
                default: vs::Subsystem::Console

            ignw:
                name: IgnoreWarnings
                type: std::set<int>
                flag: "IGNORE:"
                properties:
                    - flag_before_each_value
